AC_INIT
AM_INIT_AUTOMAKE(barvinok, 0.05)
AC_PROG_LIBTOOL
AC_PROG_CXX
AC_SUBST(versioninfo)
versioninfo=3:0:1

dnl Check for GMP library
AC_MSG_CHECKING(whether to use GMP)
AC_ARG_WITH(libgmp, 
        [  --with-libgmp           DIR Location of the GMP Distribution], 
	gmp_package=$withval, gmp_package=yes)
if test "x$gmp_package" = "xno"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(Need gmp)
else
	AC_MSG_RESULT(yes)
	if test "x$gmp_package" != "xyes"; then
	    GMP_DIR=$gmp_package
	    if test ! -d "$GMP_DIR"; then
	    	AC_ERROR(Directory given for GMP Distribution is not a directory)
	    fi
	    CPPFLAGS="-I$GMP_DIR/include $CPPFLAGS"
	    LDFLAGS="-L$GMP_DIR/lib $LDFLAGS"
	fi
	poly_cv_gmpfatal="no"
	AC_CHECK_HEADER(gmp.h,
		[AC_CHECK_LIB(gmp,main,
		    [],
		    [poly_cv_gmpfatal="yes"])],
		[poly_cv_gmpfatal="yes"])
	if test "$poly_cv_gmpfatal" = "yes"; then
		AC_MSG_ERROR([GMP not found])
	fi
fi

AC_ARG_WITH(polylib,
            [  --with-polylib=DIR      DIR Location of PolyLib],
            [ echo "Package polylib : $withval" && polylib_package=$withval],  
            [ polylib_package=yes ])

if test "$polylib_package" = "no"; then
    AC_MSG_ERROR(Need polylib)
fi

if test "$polylib_package" != "yes"; then
    CPPFLAGS="-I$polylib_package/include $CPPFLAGS"
    LDFLAGS="-L$polylib_package/lib $LDFLAGS"
    LD_LIBRARY_PATH="$polylib_package/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH
fi

AC_CHECK_LIB(polylibgmp, PolyhedronTSort,[],[
    AC_MSG_ERROR(Need polylib)
])
AC_REPLACE_FUNCS(Enumeration_Free reduce_evalue)
AC_TRY_RUN([
#include <polylib/polylibgmp.h>

int main()
{
    int i, j;
    Polyhedron *P;
    Matrix *M = Matrix_Alloc(6,5);
    for (i = 0; i < 6; ++i) {
	value_set_si(M->p[i][0], 1);
	for (j = 1; j < 4; ++j)
	    value_set_si(M->p[i][j], (j-1 == i/2) * (1-2*(i%2)));
	value_set_si(M->p[i][4], i%2);
    }
    P = Constraints2Polyhedron(M, 6);
    return !(P->NbRays == 8);
}
],,
AC_MSG_WARN([This version of polylib does not automatically])
AC_MSG_WARN([enlarge the chernikova table space]))

AC_TRY_RUN([
#include <polylib/polylibgmp.h>

int main()
{
    enode *en = new_enode(polynomial, 1, 1);
    return !(en->arr[0].x.p == NULL);
}
],,
AC_MSG_WARN([This version of polylib leaks]))

AC_ARG_WITH(ntl,
            [  --with-ntl=DIR          DIR Location of NTL],
            [ echo "Package tnl : $withval" && ntl_package=$withval],  
            [ ntl_package=yes ])

if test "$ntl_package" = "no"; then
    AC_MSG_ERROR(Need ntl)
fi

if test "$ntl_package" != "yes"; then
    CPPFLAGS="-I$ntl_package/include $CPPFLAGS"
    LDFLAGS="-L$ntl_package/lib $LDFLAGS"
fi

AC_CHECK_LIB(ntl, main,[],[
    AC_MSG_ERROR(Need ntl)
])

AC_OUTPUT(Makefile)
