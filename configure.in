AC_INIT
AM_INIT_AUTOMAKE(barvinok, 0.24)
AC_PROG_CC
gl_EARLY

AC_PROG_CXX
AM_PROG_LEX
AC_PROG_YACC
AC_SUBST(versioninfo)
versioninfo=14:0:1

AC_CANONICAL_HOST
AC_LIBTOOL_WIN32_DLL
AC_SUBST(BV_LDFLAGS)
case $host in
	*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)
	if test "$enable_shared" = yes; then
		BV_LDFLAGS="-no-undefined" 
	fi
	;;
esac

AC_DISABLE_SHARED
AC_PROG_LIBTOOL

gl_MODULES(argp progname)
gl_INIT

AC_CHECK_HEADERS(getopt.h)
AC_CHECK_HEADERS(sys/times.h)

AC_ARG_WITH(default-prefix,
	AS_HELP_STRING([--with-default-prefix=DIR],
	    [Default installation prefix of optional packages]))
if test "${with_default_prefix+set}" = set; then
	if test "${with_ginac_prefix+set}" != set -a \
	   "${with_ginac_exec_prefix+set}" != set -a \
	   -f "$with_default_prefix/bin/ginac-config"; then
		with_ginac_prefix=$with_default_prefix
	fi
	if test "${with_libgmp+set}" != set -a \
	   -f "$with_default_prefix/include/gmp.h"; then
		with_libgmp=$with_default_prefix
	fi
	if test "${with_polylib+set}" != set -a \
	   -f "$with_default_prefix/include/polylib/polylibgmp.h"; then
		with_polylib=$with_default_prefix
	fi
	if test "${with_piplib+set}" != set -a \
	   -f "$with_default_prefix/include/piplib/piplibMP.h"; then
		with_piplib=$with_default_prefix
	fi
	if test "${with_ntl+set}" != set -a \
	   -f "$with_default_prefix/include/NTL/ZZ.h"; then
		with_ntl=$with_default_prefix
	fi
	if test "${with_omega+set}" != set -a \
	   -f "$with_default_prefix/include/omega/omega.h"; then
		with_omega=$with_default_prefix
	fi
	if test "${with_cddlib+set}" != set -a \
	   -f "$with_default_prefix/include/cddmp.h"; then
		with_cddlib=$with_default_prefix
	fi
	if test "${with_glpk+set}" != set -a \
	   -f "$with_default_prefix/include/glpk.h"; then
		with_glpk=$with_default_prefix
	fi
fi

dnl Check for GMP library
AC_MSG_CHECKING(whether to use GMP)
AC_ARG_WITH(libgmp, 
        [  --with-libgmp           DIR Location of the GMP Distribution], 
	gmp_package=$withval, gmp_package=yes)
if test "x$gmp_package" = "xno"; then
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(Need gmp)
else
	AC_MSG_RESULT(yes)
	if test "x$gmp_package" != "xyes"; then
	    GMP_DIR=$gmp_package
	    if test ! -d "$GMP_DIR"; then
	    	AC_ERROR(Directory given for GMP Distribution is not a directory)
	    fi
	    CPPFLAGS="-I$GMP_DIR/include $CPPFLAGS"
	    LDFLAGS="-L$GMP_DIR/lib $LDFLAGS"
	fi
	poly_cv_gmpfatal="no"
	AC_CHECK_HEADER(gmp.h,
		[AC_CHECK_LIB(gmp,main,
		    [],
		    [poly_cv_gmpfatal="yes"])],
		[poly_cv_gmpfatal="yes"])
	if test "$poly_cv_gmpfatal" = "yes"; then
		AC_MSG_ERROR([GMP not found])
	fi
fi
AC_CHECK_DECL(mpz_divisible_p,[],[AC_LIBOBJ(mpz_divisible_p)],[#include <gmp.h>])

AC_ARG_WITH(polylib,
            [  --with-polylib=DIR      DIR Location of PolyLib],
            [ echo "Package polylib : $withval" && polylib_package=$withval],  
            [ polylib_package=yes ])

if test "$polylib_package" = "no"; then
    AC_MSG_ERROR(Need polylib)
fi

if test "$polylib_package" != "yes"; then
    CPPFLAGS="-I$polylib_package/include $CPPFLAGS"
    LDFLAGS="-L$polylib_package/lib $LDFLAGS"
    LD_LIBRARY_PATH="$polylib_package/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH
fi

AC_CHECK_HEADERS([polylib/polylibgmp.h], [], [
    AC_MSG_ERROR(Need polylib)
])
AC_CHECK_LIB(polylibgmp, PolyhedronTSort,[],[
    AC_MSG_ERROR(Need polylib)
])
AC_CHECK_FUNCS(Enumeration_Free)
AC_CHECK_FUNCS(compress_parms, [AC_LIBOBJ(remove_equalities)])
AC_SUBST(bv_extra_programs)
AC_CHECK_FUNCS(LexSmaller,[
	bv_extra_programs="verify_lexsmaller\$(EXEEXT) $bv_extra_programs"
    ])
AC_REPLACE_FUNCS(DomainConstraintSimplify)
AC_TRY_RUN([
#include <polylib/polylibgmp.h>

int main()
{
    int i, j;
    Polyhedron *P;
    Matrix *M = Matrix_Alloc(6,5);
    for (i = 0; i < 6; ++i) {
	value_set_si(M->p[i][0], 1);
	for (j = 1; j < 4; ++j)
	    value_set_si(M->p[i][j], (j-1 == i/2) * (1-2*(i%2)));
	value_set_si(M->p[i][4], i%2);
    }
    P = Constraints2Polyhedron(M, 6);
    return !(P->NbRays == 8);
}
],
[AC_DEFINE(HAVE_GROWING_CHERNIKOVA,[],
	  [PolyLib automatically grows the Chernikova table space])],
AC_MSG_WARN([This version of PolyLib does not automatically])
AC_MSG_WARN([enlarge the Chernikova table space]),
AC_MSG_WARN([Unable to determine whether PolyLib automatically])
AC_MSG_WARN([grows the Chernikova table space]))

AC_TRY_RUN([
#include <polylib/polylibgmp.h>

int main()
{
    enode *en = new_enode(polynomial, 1, 1);
    return !(en->arr[0].x.p == NULL);
}
],,
AC_MSG_WARN([This version of polylib leaks]),[true])

AC_TRY_RUN([
#include <stdio.h>
#include <polylib/polylibgmp.h>

int main()
{
    Matrix *M;
    Polyhedron *P, *C;
    Param_Polyhedron *PP;
    int i;
    Param_Vertices *V;

    freopen("$srcdir/tests/ehrhart/t12.in", "r", stdin);
    M = Matrix_Read();
    P = Constraints2Polyhedron(M, 1024);
    M = Matrix_Read();
    C = Constraints2Polyhedron(M, 1024);
    PP = Polyhedron2Param_Domain(P, C, 1024);
    for (i = 0, V = PP->V; V; ++i, V = V->next)
	;
    return !(i == 10);
}
],
[],
AC_MSG_ERROR([This version of polylib produces incorrect vertices.]),
AC_MSG_WARN([Unable to determine whether PolyLib computes correct vertices]))

AC_MSG_CHECKING([number of arguments of Polyhedron_Enumerate])
AC_TRY_COMPILE([#include <polylib/polylibgmp.h>], 
	       [Polyhedron_Enumerate(NULL,NULL,0,NULL)],
	       [AC_MSG_RESULT(4)
		AC_DEFINE(HAVE_ENUMERATE4,[],
			  [Polyhedron_Enumerate takes four arguments])],
	       [AC_MSG_RESULT(3)])

AC_MSG_CHECKING([number of arguments of count_points])
AC_TRY_COMPILE([#include <polylib/polylibgmp.h>], 
	       [count_points(0,NULL,NULL,NULL)],
	       [AC_MSG_RESULT(4)
		AC_DEFINE(HAVE_COUNT_POINTS4,[],
			  [count_points takes four arguments])],
	       [AC_MSG_RESULT(3)])

AC_ARG_WITH(piplib,
            [  --with-piplib=DIR       DIR Location of PIP],
            [ echo "Package piplib : $withval" && piplib_package=$withval],  
            [ piplib_package=yes ])

have_piplib=false
if test "$piplib_package" != "no"; then
    SAVE_CPPFLAGS="$CPPFLAGS"
    SAVE_LDFLAGS="$LDFLAGS"
    if test "$piplib_package" != "yes"; then
	CPPFLAGS="-I$piplib_package/include $CPPFLAGS"
	LDFLAGS="-L$piplib_package/lib $LDFLAGS"
    fi

    bv_cv_piplibfatal="no"
    AC_CHECK_LIB(piplibMP, pip_solve,[
	AC_CHECK_MEMBER(PipOptions.Urs_parms, [], [
	    AC_MSG_WARN([Piplib too old; please install version 1.3.6 or newer])
	    bv_cv_piplibfatal="yes"
	],[#include <stdio.h>
	   #include <piplib/piplibMP.h>])
    ],[
	AC_MSG_WARN([Piplib not found])
	bv_cv_piplibfatal="yes"
    ])
    if test "$bv_cv_piplibfatal" = "no"; then
	AC_DEFINE(HAVE_PIPLIB,[],[use piplib])
	LIBS="-lpiplibMP $LIBS"
	AC_LIBOBJ(piputil)
	bv_extra_programs="piptest\$(EXEEXT) $bv_extra_programs"
	have_piplib=true
    else
	CPPFLAGS="$SAVE_CPPFLAGS"
	LDFLAGS="$SAVE_LDFLAGS"
    fi
fi
AM_CONDITIONAL(HAVE_PIPLIB, test x$have_piplib = xtrue)

AC_MSG_CHECKING(if the fractional representation should be used)
AC_ARG_ENABLE(fractional, [AS_HELP_STRING([--disable-fractional],
					  [Don't use fractional representation])],
	    [bv_cv_fractional=$enableval], [bv_cv_fractional="yes"])
AC_ARG_ENABLE(modulo, [AS_HELP_STRING([--disable-modulo],
				      [Don't use fractional representation])],
	    [bv_cv_modulo=$enableval], [bv_cv_modulo="$bv_cv_fractional"])
AC_MSG_RESULT($bv_cv_modulo)
if test "x$bv_cv_modulo" != "xno" ; then
        AC_DEFINE(USE_MODULO,[], [Use fractional representation])
fi

AC_MSG_CHECKING(whether to use incremental algorithm)
AC_ARG_ENABLE(incremental,
	[AS_HELP_STRING([--enable-incremental@<:@=bf|df@:>@],
			[Enable incremental algorithm [bf]])],
	[bv_cv_incremental=$enableval], [bv_cv_incremental="no"])
AC_MSG_RESULT($bv_cv_incremental)
case $bv_cv_incremental in
	yes | bf)
		AC_DEFINE(USE_INCREMENTAL_BF,[], 
			  [Use breadth-first incremental algorithm])
	;;
	df)
		AC_DEFINE(USE_INCREMENTAL_DF,[], 
			  [Use depth-first incremental algorithm])
	;;
esac

AC_ARG_WITH(ntl,
            [  --with-ntl=DIR          DIR Location of NTL],
            [ echo "Package ntl : $withval" && ntl_package=$withval],  
            [ ntl_package=yes ])

if test "$ntl_package" = "no"; then
    AC_MSG_ERROR(Need ntl)
fi

if test "$ntl_package" != "yes"; then
    CPPFLAGS="-I$ntl_package/include $CPPFLAGS"
    LDFLAGS="-L$ntl_package/lib $LDFLAGS"
fi

AC_EGREP_CPP(yes, [
    #include <NTL/ZZ.h>
    #ifdef NTL_GMP_LIP
    yes
    #endif
    ],:,AC_MSG_ERROR(ntl not compiled with gmp support))

AC_CHECK_LIB(ntl, main,[],[
    AC_MSG_ERROR(Need ntl)
])

AC_MSG_CHECKING(whether to compile bernstein)
AC_ARG_WITH(bernstein,
	    [AS_HELP_STRING([--without-bernstein],[do not compile bernstein])],
            [ with_bernstein=$withval],  [ with_bernstein=yes ])
AC_MSG_RESULT($with_bernstein)

AC_SUBST(bv_barvinok_maximize)
have_ginac=false
if test "$with_bernstein" != "no"; then
	AC_LANG_PUSH(C++)
	AM_PATH_GINAC(1.3.3, [
		have_ginac=true
		AC_DEFINE(HAVE_GINAC,[],[use GiNaC])
		PACKAGE_LIBS="-lbarvinok -lbernstein"
		bv_barvinok_maximize="barvinok_maximize\$(EXEEXT)"
	])
	AC_LANG_POP
fi
AM_CONDITIONAL(HAVE_GINAC, test x$have_ginac = xtrue)

AC_MSG_CHECKING(whether to use Omega)
AC_ARG_WITH(omega, [AS_HELP_STRING([--with-omega=DIR],[DIR Location of Omega])],
            [ omega_package=$withval],  [ omega_package=yes ])
AC_MSG_RESULT($omega_package)

AC_SUBST(OMEGA_CPPFLAGS)
AC_SUBST(OMEGA_LDFLAGS)
AC_SUBST(OMEGA_LIBS)
AC_SUBST(bv_omega_programs)
have_omega=false
if test "$omega_package" != "no"; then
    if test "x$omega_package" != "xyes"; then
	OMEGA_CPPFLAGS="-I$omega_package/include/omega"
	OMEGA_LDFLAGS="-L$omega_package/lib"
    else
	for i in /usr/include /usr/local/include; do
	    if test -f $i/omega/omega.h; then
		OMEGA_CPPFLAGS="-I$i/omega"
	    fi
	done
    fi

    AC_LANG_PUSH(C++)
    SAVE_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$OMEGA_CPPFLAGS $CPPFLAGS"
    AC_CHECK_HEADERS([omega.h],[
	if test x$have_ginac = xtrue; then
	    bv_omega_programs="occ $bv_omega_programs"
	fi
	AC_DEFINE(HAVE_OMEGA,[],[use omega])
	OMEGA_LIBS="-lcode_gen -lomega"
	have_omega=true
    ],[AC_MSG_WARN(Omega not found)])
    CPPFLAGS="$SAVE_CPPFLAGS"
    AC_LANG_POP
fi
AM_CONDITIONAL(HAVE_OMEGA, test x$have_omega = xtrue)


AC_MSG_CHECKING(whether to use cddlib)
AC_ARG_WITH(cddlib, [AS_HELP_STRING([--with-cddlib=DIR],[DIR Location of cddlib])],
            [ cddlib_package=$withval],  [ cddlib_package=yes ])
AC_MSG_RESULT($cddlib_package)

have_cddlib=false
if test "$cddlib_package" != "no"; then
    if test "x$cddlib_package" != "xyes"; then
	CPPFLAGS="-I$cddlib_package/include $CPPFLAGS"
	LDFLAGS="-L$cddlib_package/lib $LDFLAGS"
    fi
    AC_TRY_LINK([
#define GMPRATIONAL
#include <setoper.h>
#include <cddmp.h>
], [
    mytype a;
    dd_init(a); ], [
	have_cddlib=true
	AC_CHECK_LIB(cddgmp, main,[],[have_cddlib=false])
    ])
fi
AM_CONDITIONAL(HAVE_CDDLIB, test x$have_cddlib = xtrue)



AC_MSG_CHECKING(whether to use GLPK)
AC_ARG_WITH(glpk, [AS_HELP_STRING([--with-glpk=DIR],[DIR Location of GLPK])],
            [ glpk_package=$withval],  [ glpk_package=yes ])
AC_MSG_RESULT($glpk_package)

have_glpk=false
if test "$glpk_package" != "no"; then
    if test "x$glpk_package" != "xyes"; then
	CPPFLAGS="-I$glpk_package/include $CPPFLAGS"
	LDFLAGS="-L$glpk_package/lib $LDFLAGS"
    fi
    AC_CHECK_HEADERS([glpk.h],[
	have_glpk=true
	AC_CHECK_LIB(glpk, main,[],[have_glpk=false])
    ])
fi
AM_CONDITIONAL(HAVE_GLPK, test x$have_glpk = xtrue)

if test "$have_glpk" = "true" -o "$have_cddlib" = "true"; then
    AC_LIBOBJ(sample)
    bv_extra_programs="polyhedron_sample\$(EXEEXT) 4coins\$(EXEEXT) lexmin\$(EXEEXT) $bv_extra_programs"
fi

AC_SUBST(GIT_HEAD_ID)
AC_SUBST(GIT_HEAD)
AC_SUBST(GIT_HEAD_VERSION)
if test -f $srcdir/.git/HEAD; then
    GIT_HEAD="$srcdir/.git/index"
    GIT_REPO="$srcdir/.git"
    GIT_HEAD_ID=`GIT_DIR=$GIT_REPO git describe`
elif test -f $srcdir/GIT_HEAD_ID; then
    GIT_HEAD_ID=`cat $srcdir/GIT_HEAD_ID`
else
    mysrcdir=`(cd $srcdir; pwd)`
    head=`basename $mysrcdir | sed -e 's/.*-//'`
    head2=`echo $head | sed -e 's/[^0-9a-f]//'`
    head3=`echo $head2 | sed -e 's/........................................//'`
    base=`basename $mysrcdir | sed -e 's/-.*//'`
    if test "x$head3" = "x" -a "x$head" = "x$head2"; then
	GIT_HEAD_ID="barvinok-$VERSION-$head
    elif test "x$base" = "xbarvinok-$VERSION" -a "x$head" != "x"; then
	GIT_HEAD_ID="barvinok-$VERSION-$head
    else
	GIT_HEAD_ID="UNKNOWN"
    fi
fi
if test -z "$GIT_REPO" ; then
    GIT_HEAD_VERSION="$GIT_HEAD_ID"
else
    GIT_HEAD_VERSION="\`GIT_DIR=$GIT_REPO git describe\`"
fi
echo '#define GIT_HEAD_ID "'$GIT_HEAD_ID'"' > version.h

AC_LANG_PUSH(C++)
AC_TRY_COMPILE([
		#include <set>
		void negate();
	], [negate()],
	suffix="normal", suffix="broken")
AC_CONFIG_COMMANDS([barvinok/set.h],
		   [cp $srcdir/barvinok/set.h.$suffix barvinok/set.h],
		   [suffix="$suffix"])
AC_CONFIG_COMMANDS([barvinok/NTL.h],
		   [cp $srcdir/barvinok/NTL.h.$suffix barvinok/NTL.h],
		   [suffix="$suffix"])
use_fdstream=false
SAVE_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I$srcdir $CPPFLAGS"
AC_TRY_COMPILE([#include "fdstream.h"],[],
	[AC_DEFINE(USE_FDSTREAM,[],[use fdstream])
	use_fdstream=true])
CPPFLAGS="$SAVE_CPPFLAGS"
AC_LANG_POP
AM_CONDITIONAL(USE_FDSTREAM, [test "$use_fdstream" = true])

AX_CREATE_PKGCONFIG_INFO

AC_CONFIG_HEADERS(config.h)
AC_CONFIG_FILES(Makefile lib/Makefile doc/Makefile omega/Makefile)
if test x$have_ginac = xtrue; then
    AC_CONFIG_SUBDIRS(bernstein)
fi
AC_OUTPUT
